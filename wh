<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QGO - Logistics & Warehouse System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/signature_pad@4.0.0/dist/signature_pad.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <style>
        :root { --theme-color: #4f46e5; }
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .container { max-width: 1200px; margin: 1rem auto; padding: 1rem; background-color: white; border-radius: 0.75rem; border-top: 5px solid var(--theme-color); box-shadow: 0 10px 25px rgba(0,0,0,0.05); }
        .overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 1000; opacity: 0; visibility: hidden; transition: opacity 0.3s, visibility 0.3s; padding: 1rem; }
        .overlay.visible { opacity: 1; visibility: visible; }
        .modal-content { background: white; padding: 1.5rem; border-radius: 0.5rem; width: 100%; max-width: 800px; max-height: 90vh; overflow-y: auto; transform: scale(0.9); transition: transform 0.3s; }
        .worker-modal { max-width: 500px; }
        .loader { border: 4px solid #f3f3f3; border-top: 4px solid var(--theme-color); border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        #notification { position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background-color: #2d3748; color: white; padding: 1rem 1.5rem; border-radius: 0.5rem; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 2000; text-align: center; transition: transform 0.5s, opacity 0.5s; transform: translateY(100px); opacity: 0; }
        #notification.show { transform: translateY(0); opacity: 1; }
        #signature-pad { border: 2px dashed #d1d5db; border-radius: 0.5rem; cursor: crosshair; width: 100%; height: 200px; }
        .pod-view-section { border: 1px solid #e5e7eb; padding: 1rem; border-radius: 0.5rem; }
        .simulation-active { background-color: var(--theme-color); color: white; }
        .dashboard-tab { cursor: pointer; padding: 0.5rem 1rem; border-bottom: 2px solid transparent; color: #6b7280; }
        .dashboard-tab-active { border-color: var(--theme-color); color: var(--theme-color); font-weight: 600; }
        .job-category-header { font-size: 1.25rem; font-weight: 700; color: #374151; margin-top: 1.5rem; margin-bottom: 0.75rem; border-bottom: 1px solid #e5e7eb; padding-bottom: 0.5rem; }
        .job-card { background-color: #ffffff; border: 1px solid #e5e7eb; border-left-width: 4px; padding: 1rem; border-radius: 0.5rem; margin-bottom: 0.75rem; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem; transition: box-shadow 0.2s; }
        .job-card:hover { box-shadow: 0 4px 12px rgba(0,0,0,0.08); }
        .stat-card { background-color: #f9fafb; padding: 1rem; border-radius: 0.5rem; text-align: center; border: 1px solid #e5e7eb; }
        #final-pod-page-container { max-width: 800px; margin: 2rem auto; padding: 2.5rem; background: white; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border-radius: 0.5rem; }
        @media print { 
            body * { visibility: hidden; } 
            #pod-document, #pod-document * { visibility: visible; } 
            #pod-document { position: absolute; left: 0; top: 0; width: 100%; margin: 0; padding: 0; border: none; box-shadow: none; border-radius: 0; }
            .no-print { display: none !important; }
            @page { size: A4; margin: 15mm; } 
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="bg-gray-800 text-white p-2 text-center text-sm shadow-lg no-print">
        <span class="font-bold mr-4">SIMULATION MODE</span>
        <button id="simulate-admin-btn" class="simulation-active px-3 py-1 rounded-md">Simulate Supervisor</button>
        <button id="simulate-worker-btn" class="px-3 py-1 rounded-md">Simulate Worker</button>
    </div>

    <div id="app-container" class="container"></div>
    
    <div id="final-pod-page" class="hidden"></div>
    <div id="public-pod-view" class="hidden bg-white p-8 min-h-screen"></div>
    
    <div id="loader-overlay" class="overlay hidden"><div class="loader"></div></div>
    <div id="notification"></div>
    <div id="view-pod-modal" class="overlay"><div id="view-pod-modal-content" class="modal-content"></div></div>
    <div id="worker-pod-modal" class="overlay"><div id="worker-pod-modal-content" class="modal-content worker-modal"></div></div>
    <div id="assign-worker-modal" class="overlay"><div class="modal-content" style="max-width: 400px;"></div></div>
    <div id="inventory-modal" class="overlay"><div class="modal-content" style="max-width: 500px;"></div></div>
    <div id="job-details-modal" class="overlay"><div class="modal-content"></div></div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getFirestore, doc, getDoc, onSnapshot, collection, query, where, getDocs, writeBatch, serverTimestamp, addDoc, runTransaction } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        const firebaseConfig = {
            apiKey: "AIzaSyAAulR2nJQm-4QtNyEqKTnnDPw-iKW92Mc", authDomain: "my-job-file-system.firebaseapp.com", projectId: "my-job-file-system",
            storageBucket: "my-job-file-system.appspot.com", messagingSenderId: "145307873304", appId: "1:145307873304:web:d661ea6ec118801b4a136d"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        
        let currentUser;
        let currentView = 'admin';
        let signaturePad;
        let inventoryCache = [];
        let jobsCache = [];
        const WORKERS = ['Ali Hassan', 'Mohammed Khan', 'Fatima Ahmed', 'Yusuf Ibrahim'];

        function simulateUser(role, workerName = null) {
            currentUser = role === 'admin' ? { displayName: 'Fahad (Supervisor)', role: 'admin' } : { displayName: workerName || 'Ali Hassan', role: 'worker' };
            document.getElementById('simulate-admin-btn').classList.toggle('simulation-active', role === 'admin');
            document.getElementById('simulate-worker-btn').classList.toggle('simulation-active', role === 'worker');
            renderUIBasedOnRole();
        }

        function renderUIBasedOnRole() {
            const appContainer = document.getElementById('app-container');
            if (currentUser.role === 'admin') {
                appContainer.innerHTML = getAdminDashboardShell();
                document.getElementById('dashboard-tab-btn').addEventListener('click', () => switchTab('dashboard'));
                document.getElementById('warehouse-tab-btn').addEventListener('click', () => switchTab('warehouse'));
                switchTab('dashboard');
            } else {
                appContainer.innerHTML = getWorkerDashboardShell();
                listenForJobFiles();
            }
        }
        
        function switchTab(tabName) {
            document.getElementById('dashboard-tab-btn').classList.toggle('dashboard-tab-active', tabName === 'dashboard');
            document.getElementById('warehouse-tab-btn').classList.toggle('dashboard-tab-active', tabName === 'warehouse');
            document.getElementById('dashboard-content').style.display = tabName === 'dashboard' ? 'block' : 'none';
            document.getElementById('warehouse-content').style.display = tabName === 'warehouse' ? 'block' : 'none';
            if (tabName === 'dashboard') {
                document.getElementById('user-display-name').textContent = currentUser.displayName;
                document.getElementById('user-role-display').textContent = currentUser.role;
                document.getElementById('admin-view-btn').addEventListener('click', () => renderTable('admin'));
                document.getElementById('worker-view-btn').addEventListener('click', () => renderTable('worker'));
                document.getElementById('job-search-input').addEventListener('input', (e) => listenForJobFiles(e.target.value));
                renderTable('admin');
            } else {
                document.getElementById('add-item-btn').addEventListener('click', openAddItemModal);
                listenForInventory();
            }
        }

        function listenForInventory() {
            const q = query(collection(db, "inventory"));
            onSnapshot(q, (snapshot) => {
                if(inventoryCache.length === 0) { // Only populate once to maintain simulation state
                    inventoryCache = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                }
                displayInventory();
            });
        }

        function displayInventory() {
            const container = document.getElementById('inventory-list');
            container.innerHTML = inventoryCache.length === 0 ? `<p class="text-center text-gray-500 p-4">No inventory items found.</p>` : inventoryCache.map(item => `
                <div class="job-card" style="border-left-color: #6b7280;">
                    <div><p class="font-bold text-lg">${item.name}</p><p class="text-sm text-gray-500">${item.unit || 'units'}</p></div>
                    <div class="flex items-center gap-4"><p class="text-2xl font-bold">${item.quantity}</p><button onclick="openUpdateStockModal('${item.id}', '${item.name}', ${item.quantity})" class="bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded">Update Stock</button></div>
                </div>`).join('');
        }
        
        window.openUpdateStockModal = (itemId, itemName, currentQty) => {
            const modal = document.getElementById('inventory-modal');
            modal.querySelector('.modal-content').innerHTML = `
                <h3 class="text-lg font-bold mb-4">Update Stock for ${itemName}</h3>
                <p class="text-sm mb-4">Current Stock: <strong>${currentQty}</strong>. Enter values to add or remove from this total.</p>
                <div class="grid grid-cols-2 gap-4">
                    <div><label class="block text-sm font-medium">Add Stock</label><input type="number" id="add-stock-input" class="w-full p-2 border rounded-md" placeholder="e.g., 50"></div>
                    <div><label class="block text-sm font-medium">Remove Stock</label><input type="number" id="remove-stock-input" class="w-full p-2 border rounded-md" placeholder="e.g., 5"></div>
                </div>
                <div class="text-right mt-6 space-x-2">
                    <button onclick="closeModal('inventory-modal')" class="bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button>
                    <button onclick="updateStock('${itemId}')" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Save Changes</button>
                </div>`;
            openModal('inventory-modal');
        };

        window.openAddItemModal = () => {
             const modal = document.getElementById('inventory-modal');
            modal.querySelector('.modal-content').innerHTML = `
                <h3 class="text-lg font-bold mb-4">Add New Inventory Item</h3>
                <div><label class="block text-sm font-medium">Item Name</label><input type="text" id="new-item-name" class="w-full p-2 border rounded-md" placeholder="e.g., Cardboard Box (Large)"></div>
                <div class="grid grid-cols-2 gap-4 mt-4">
                    <div><label class="block text-sm font-medium">Initial Quantity</label><input type="number" id="new-item-qty" class="w-full p-2 border rounded-md" value="0"></div>
                    <div><label class="block text-sm font-medium">Unit</label><input type="text" id="new-item-unit" class="w-full p-2 border rounded-md" placeholder="e.g., pieces, rolls"></div>
                </div>
                <div class="text-right mt-6 space-x-2">
                    <button onclick="closeModal('inventory-modal')" class="bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button>
                    <button onclick="addNewItem()" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Add Item</button>
                </div>`;
            openModal('inventory-modal');
        }

        window.updateStock = (itemId) => {
            const add = parseInt(document.getElementById('add-stock-input').value) || 0;
            const remove = parseInt(document.getElementById('remove-stock-input').value) || 0;
            const change = add - remove;
            const item = inventoryCache.find(i => i.id === itemId);
            if (item) {
                item.quantity += change;
                showNotification(`Simulated stock update for ${item.name}.`);
                displayInventory();
            }
            closeModal('inventory-modal');
        };

        window.addNewItem = () => {
            const name = document.getElementById('new-item-name').value.trim();
            const quantity = parseInt(document.getElementById('new-item-qty').value) || 0;
            const unit = document.getElementById('new-item-unit').value.trim();
            if(!name) { showNotification("Item name is required.", true); return; }
            inventoryCache.push({ id: `sim_${Date.now()}`, name, quantity, unit });
            showNotification(`Simulated add of ${name}.`);
            displayInventory();
            closeModal('inventory-modal');
        }
        
        window.openJobDetailsModal = (jobId) => {
            const job = jobsCache.find(j => j.id === jobId);
            if (!job) { showNotification("Job details not found.", true); return; }
            
            const modal = document.getElementById('job-details-modal');
            let materialsHtml = inventoryCache.map(item => `
                <div class="grid grid-cols-3 items-center gap-2">
                    <label class="text-sm">${item.name}</label>
                    <input type="number" data-item-id="${item.id}" class="w-full p-1 border rounded-md text-sm" placeholder="Qty">
                    <span class="text-xs text-gray-500">In Stock: ${item.quantity}</span>
                </div>
            `).join('');

            modal.querySelector('.modal-content').innerHTML = `
                <h3 class="text-lg font-bold mb-4">Manage Job: ${job.jfn}</h3>
                <div class="pod-view-section bg-gray-50 mb-4">
                    <p><strong>Shipper:</strong> ${job.sh || 'N/A'}</p>
                    <p><strong>Consignee:</strong> ${job.co || 'N/A'}</p>
                </div>
                <h4 class="font-semibold mb-2">Packing Materials Used</h4>
                <div class="space-y-2 max-h-48 overflow-y-auto pr-2">${materialsHtml}</div>
                <div class="text-right mt-6 space-x-2">
                    <button onclick="closeModal('job-details-modal')" class="bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button>
                    <button onclick="saveJobMaterials('${jobId}')" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Save & Update Stock</button>
                </div>`;
            openModal('job-details-modal');
        };

        window.saveJobMaterials = (jobId) => {
            const inputs = document.querySelectorAll('#job-details-modal input[data-item-id]');
            let updated = false;
            inputs.forEach(input => {
                const qtyUsed = parseInt(input.value) || 0;
                if (qtyUsed > 0) {
                    const itemId = input.dataset.itemId;
                    const item = inventoryCache.find(i => i.id === itemId);
                    if (item) {
                        item.quantity -= qtyUsed;
                        updated = true;
                    }
                }
            });
            if (updated) {
                showNotification("Simulated stock levels updated.");
            }
            closeModal('job-details-modal');
        };

        function renderTable(view) {
            currentView = view;
            if (currentUser.role === 'admin') {
                document.getElementById('admin-view-btn').classList.toggle('bg-white', view === 'admin');
                document.getElementById('worker-view-btn').classList.toggle('bg-white', view === 'worker');
            }
            listenForJobFiles();
        }

        function listenForJobFiles(searchTerm = '') {
            const q = query(collection(db, 'jobfiles'));
            onSnapshot(q, (snapshot) => {
                jobsCache = snapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));
                jobsCache.sort((a,b) => (b.updatedAt?.toDate()?.getTime() || 0) - (a.updatedAt?.toDate()?.getTime() || 0));
                
                let jobsToDisplay = [...jobsCache];

                if (currentView === 'admin') {
                    displayAdminView(jobsToDisplay, searchTerm.toLowerCase());
                } else {
                    jobsToDisplay = jobsToDisplay.filter(job => job.status === 'Out for Delivery' && job.assignedTo === currentUser.displayName);
                    displayWorkerView(jobsToDisplay);
                }
            });
        }
        
        function displayAdminView(jobs, searchTerm) {
            const container = document.getElementById('job-list-container');
            const todayStart = new Date();
            todayStart.setHours(0,0,0,0);
            
            if (searchTerm) {
                jobs = jobs.filter(j => (j.jfn || '').toLowerCase().includes(searchTerm) || (j.sh || '').toLowerCase().includes(searchTerm) || (j.co || '').toLowerCase().includes(searchTerm));
            }

            const ready = jobs.filter(j => ['approved', 'checked'].includes(j.status));
            const out = jobs.filter(j => j.status === 'Out for Delivery');
            const completed = jobs.filter(j => j.status === 'Completed-POD' && j.updatedAt?.toDate() >= todayStart);
            const pending = jobs.filter(j => j.status === 'pending');
            
            document.getElementById('ready-count').textContent = ready.length;
            document.getElementById('transit-count').textContent = out.length;
            document.getElementById('completed-count').textContent = completed.length;

            let html = createCategorySection('Ready for Delivery', ready, '#2563eb');
            html += createCategorySection('Out for Delivery', out, '#d97706');
            html += createCategorySection('Completed Today', completed, '#16a34a');
            html += createCategorySection('Pending Approval', pending, '#78716c');
            container.innerHTML = html;
        }

        function displayWorkerView(jobs) {
            const container = document.getElementById('job-list-container');
            container.innerHTML = jobs.length === 0 ? `<p class="p-8 text-center text-gray-500">You have no jobs assigned for delivery.</p>` : `<h2 class="job-category-header">Your Assigned Deliveries (${jobs.length})</h2>` + jobs.map(job => createJobCardHtml(job, '#059669')).join('');
        }

        function createCategorySection(title, jobs, color) {
            let content = `<h2 class="job-category-header">${title} (${jobs.length})</h2>`;
            content += jobs.length === 0 ? `<p class="text-sm text-gray-500 italic">No jobs in this category.</p>` : jobs.map(job => createJobCardHtml(job, color)).join('');
            return content;
        }

        function createJobCardHtml(job, color = '#78716c') {
            const status = job.status || 'pending';
            let actionButtons = '';
            if (currentView === 'admin') {
                const manageBtn = `<button onclick='openJobDetailsModal("${job.id}")' class="bg-gray-200 hover:bg-gray-300 text-black font-bold py-2 px-4 rounded text-sm">Manage Job</button>`;
                if (status === 'approved' || status === 'checked') actionButtons = manageBtn + `<button onclick='openAssignWorkerModal("${job.id}")' class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm ml-2">Prepare Delivery</button>`;
                else if (status === 'Out for Delivery' || status === 'Completed-POD') actionButtons = `<button onclick='openViewPodModal("${job.jfn}")' class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded text-sm">View Order</button>`;
                else actionButtons = manageBtn;
            } else {
                actionButtons = `<button onclick='openWorkerPodModal("${job.jfn}")' class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded text-sm">Complete Delivery</button>`;
            }
            return `<div class="job-card" style="border-left-color: ${color};"><div><p class="font-bold text-indigo-700">${job.jfn || 'N/A'}</p><p class="text-sm text-gray-600"><strong>Shipper:</strong> ${job.sh || 'N/A'}</p><p class="text-sm text-gray-600"><strong>Consignee:</strong> ${job.co || 'N/A'}</p></div><div class="text-right space-x-2">${actionButtons}<p class="text-xs text-gray-400 mt-2">Last Updated: ${job.updatedAt?.toDate().toLocaleString() || 'N/A'}</p></div></div>`;
        }

        window.openAssignWorkerModal = (docId) => {
            const modal = document.getElementById('assign-worker-modal');
            modal.querySelector('.modal-content').innerHTML = `<h3 class="text-lg font-bold mb-4">Assign Worker for Delivery</h3><select id="worker-select" class="w-full p-2 border rounded-md">${WORKERS.map(w => `<option value="${w}">${w}</option>`).join('')}</select><div class="text-right mt-6 space-x-2"><button onclick="closeModal('assign-worker-modal')" class="bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button><button onclick="preparePodDocument('${docId}')" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Confirm</button></div>`;
            openModal('assign-worker-modal');
        };

        window.preparePodDocument = async (docId) => {
            const workerName = document.getElementById('worker-select').value;
            if (!workerName) { showNotification("Please select a worker.", true); return; }
            showLoader();
            try {
                const jobDocRef = doc(db, 'jobfiles', docId);
                const jobDocSnap = await getDoc(jobDocRef);
                if (!jobDocSnap.exists()) throw new Error("Job file not found!");
                const jobData = jobDocSnap.data();
                const podData = {
                    jobFileNo: jobData.jfn, shipperName: jobData.sh, consigneeName: jobData.co,
                    description: jobData.dsc, mawb: jobData.mawb, hawb: jobData.hawb,
                    origin: jobData.or, destination: jobData.de, pieces: jobData.pc,
                    grossWeight: jobData.gw, podStatus: 'Out for Delivery',
                    preparedBy: currentUser.displayName, preparedAt: serverTimestamp(),
                    assignedTo: workerName
                };
                const batch = writeBatch(db);
                batch.set(doc(collection(db, 'pods')), podData);
                batch.update(jobDocRef, { status: 'Out for Delivery', assignedTo: workerName, updatedAt: serverTimestamp() });
                await batch.commit();
                const notification = document.getElementById('notification');
                notification.innerHTML = `Delivery assigned to ${workerName}. <button onclick="switchToWorker('${workerName}')" class="font-bold underline ml-2">Switch to ${workerName}'s View</button>`;
                notification.style.backgroundColor = '#2d3748';
                notification.classList.add('show');
                setTimeout(() => { notification.classList.remove('show'); }, 5000);
                closeModal('assign-worker-modal');
            } catch (error) { console.error("Error preparing POD:", error); showNotification("Error preparing document.", true);
            } finally { hideLoader(); }
        };

        window.switchToWorker = (workerName) => {
            simulateUser('worker', workerName);
            document.getElementById('notification').classList.remove('show');
        };

        async function findPodByJobFileNo(jobFileNo) {
            const q = query(collection(db, 'pods'), where('jobFileNo', '==', jobFileNo));
            const snapshot = await getDocs(q);
            if (snapshot.empty) return null;
            return { id: snapshot.docs[0].id, ...snapshot.docs[0].data() };
        }
        
        async function findPodById(podId) {
            const docRef = doc(db, 'pods', podId);
            const docSnap = await getDoc(docRef);
            return docSnap.exists() ? { id: docSnap.id, ...docSnap.data() } : null;
        }

        window.openViewPodModal = async (jobFileNo) => {
            const modalContent = document.getElementById('view-pod-modal-content');
            modalContent.innerHTML = getAdminViewPodModalHtml(null);
            openModal('view-pod-modal');
            const pod = await findPodByJobFileNo(jobFileNo);
            modalContent.innerHTML = getAdminViewPodModalHtml(pod);
        };

        window.openWorkerPodModal = async (jobFileNo) => {
            const modalContent = document.getElementById('worker-pod-modal-content');
            modalContent.innerHTML = '<div class="flex justify-center p-8"><div class="loader"></div></div>';
            openModal('worker-pod-modal');
            const pod = await findPodByJobFileNo(jobFileNo);
            if (!pod) { modalContent.innerHTML = '<p class="text-center text-red-600">Could not find delivery details.</p>'; return; }
            modalContent.innerHTML = getWorkerPodCaptureHtml(pod);
            const canvas = document.getElementById('signature-pad');
            canvas.width = canvas.offsetWidth;
            signaturePad = new SignaturePad(canvas);
            document.getElementById('clear-signature').addEventListener('click', () => signaturePad.clear());
            document.getElementById('submit-pod-btn').addEventListener('click', () => submitPod(pod.id));
        };
        
        async function submitPod(podId) {
            const receiverName = document.getElementById('receiver-name').value.trim();
            const photoFile = document.getElementById('pod-photo').files[0];
            if (signaturePad.isEmpty() || !receiverName) {
                showNotification("Receiver name and signature are required.", true);
                return;
            }
            showLoader();
            try {
                const signatureDataUrl = signaturePad.toDataURL();
                let photoDataUrl = null;
                if (photoFile) {
                    photoDataUrl = await new Promise(resolve => {
                        const reader = new FileReader();
                        reader.onload = e => resolve(e.target.result);
                        reader.readAsDataURL(photoFile);
                    });
                }
                const pod = await findPodById(podId);
                const finalPodData = {
                    ...pod, receiverName, signatureUrl: signatureDataUrl, photoUrl: photoDataUrl,
                    podStatus: 'Completed-POD', deliveredBy: currentUser.displayName, podTimestamp: new Date()
                };
                showFinalPodPage(finalPodData);
                closeModal('worker-pod-modal');
            } catch(error) { console.error("Error in POD simulation:", error); showNotification("Could not generate final POD.", true);
            } finally { hideLoader(); }
        }

        function showFinalPodPage(podData) {
            document.getElementById('app-container').style.display = 'none';
            const finalPage = document.getElementById('final-pod-page');
            finalPage.innerHTML = getFinalPodPageHtml(podData);
            finalPage.style.display = 'block';
            JsBarcode("#barcode", podData.jobFileNo, { format: "CODE128", lineColor: "#000", width: 2, height: 40, displayValue: false });
            new QRCode(document.getElementById("qrcode"), { text: window.location.href.split('?')[0] + '?viewpod=' + podData.jobFileNo, width: 80, height: 80 });

            document.getElementById('print-final-pod').addEventListener('click', () => window.print());
            document.getElementById('back-to-dashboard').addEventListener('click', () => {
                finalPage.style.display = 'none';
                document.getElementById('app-container').style.display = 'block';
                listenForJobFiles(); 
            });
            document.getElementById('send-email-btn').addEventListener('click', () => sendShareLink('email', podData.jobFileNo));
            document.getElementById('send-whatsapp-btn').addEventListener('click', () => sendShareLink('whatsapp', podData.jobFileNo));
        }

        function sendShareLink(method, jobFileNo) {
            const link = window.location.href.split('?')[0] + '?viewpod=' + encodeURIComponent(jobFileNo);
            const message = `Dear Customer, please find your Proof of Delivery from Q'go Cargo here: ${link}`;
            if (method === 'email') {
                const email = document.getElementById('share-email').value;
                if (!email) { showNotification('Please enter an email address.', true); return; }
                window.location.href = `mailto:${email}?subject=Q'go Cargo Proof of Delivery for Job ${jobFileNo}&body=${encodeURIComponent(message)}`;
            } else if (method === 'whatsapp') {
                const phone = document.getElementById('share-whatsapp').value;
                if (!phone) { showNotification('Please enter a phone number.', true); return; }
                window.open(`https://wa.me/${phone}?text=${encodeURIComponent(message)}`, '_blank');
            }
        }

        function getFinalPodPageHtml(pod) {
            return `<div id="final-pod-page-container"><div id="pod-document">${getProfessionalPodHtml(pod)}</div><div class="mt-8 no-print"><div class="p-4 bg-gray-50 border rounded-lg"><h3 class="font-bold text-lg mb-2">Share with Customer</h3><div class="grid grid-cols-1 sm:grid-cols-2 gap-4"><div class="flex items-center"><input type="email" id="share-email" placeholder="Customer's Email" class="w-full p-2 border rounded-l-md"><button id="send-email-btn" class="bg-blue-600 text-white p-2 rounded-r-md">Send Email</button></div><div class="flex items-center"><input type="tel" id="share-whatsapp" placeholder="Customer's WhatsApp" class="w-full p-2 border rounded-l-md"><button id="send-whatsapp-btn" class="bg-green-600 text-white p-2 rounded-r-md">Send WhatsApp</button></div></div></div><div class="text-center mt-6 space-x-4"><button id="print-final-pod" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg">Print / Save PDF</button><button id="back-to-dashboard" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg">Back to Dashboard</button></div></div></div>`;
        }
        
        function getAdminViewPodModalHtml(pod) {
            const content = pod ? getProfessionalPodHtml(pod) : '<div class="flex justify-center p-8"><div class="loader"></div></div>';
            return `<div class="flex justify-between items-center mb-4"><h2 class="text-2xl font-bold">Delivery Note & POD</h2><div><button onclick="printPod()" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-1 px-3 rounded text-sm mr-2">Print</button><button onclick="closeModal('view-pod-modal')" class="text-gray-400 hover:text-gray-600 text-3xl">&times;</button></div></div><div id="pod-details-content">${content}</div>`;
        }
        
        function getProfessionalPodHtml(pod) {
            let podCompletionDetails = '';
            if (pod.podStatus === 'Completed-POD') {
                const podDate = pod.podTimestamp?.toLocaleString('en-KW') || 'N/A';
                const photoHtml = pod.photoUrl ? `<a href="${pod.photoUrl}" target="_blank"><img src="${pod.photoUrl}" alt="Photo" class="mt-1 rounded-md border-2 p-1 bg-white max-h-48"></a>` : '<p class="text-xs italic text-gray-500">No photo provided.</p>';
                podCompletionDetails = `<div class="mt-4 pod-view-section bg-green-50"><h3 class="text-green-700">Proof of Delivery - Completed</h3><div class="grid grid-cols-1 md:grid-cols-2 gap-4"><div><p><strong>Receiver:</strong> ${pod.receiverName || 'N/A'}</p><p><strong>Received On:</strong> ${podDate}</p><p><strong>Delivered By:</strong> ${pod.deliveredBy || 'N/A'}</p><p class="mt-2"><strong>Signature:</strong></p><img src="${pod.signatureUrl}" alt="Signature" class="mt-1 rounded-md border-2 p-1 bg-white"></div><div><p><strong>Photo Evidence:</strong></p>${photoHtml}</div></div></div>`;
            } else {
                podCompletionDetails = `<div class="mt-4 text-center font-semibold text-yellow-700 bg-yellow-100 p-3 rounded-md">Status: Out for Delivery</div>`;
            }

            return `<div id="professional-pod-view" class="text-sm"><div class="flex justify-between items-start pb-4 mb-4 border-b-2 border-black"><div><div class="text-3xl font-extrabold" style="color: #0E639C;">Q'go<span style="color: #4FB8AF;">Cargo</span></div><p class="text-xs text-gray-500 mt-1">Salmiya, Kuwait<br>+965 1234 5678 | info@qgocargo.com</p></div><div class="text-right"><h2 class="text-2xl font-bold text-gray-700">DELIVERY NOTE</h2><p><strong>Job No:</strong> ${pod.jobFileNo}</p><svg id="barcode"></svg></div></div><div class="grid grid-cols-2 gap-4 mb-4"><div class="pod-view-section"><h3>Shipper</h3><p>${pod.shipperName || 'N/A'}</p><p><strong>Origin:</strong> ${pod.origin || 'N/A'}</p></div><div class="pod-view-section"><h3>Consignee</h3><p>${pod.consigneeName || 'N/A'}</p><p><strong>Destination:</strong> ${pod.destination || 'N/A'}</p></div></div><div class="pod-view-section mb-4"><h3>Shipment Information</h3><p><strong>Description:</strong> ${pod.description || 'N/A'}</p><div class="grid grid-cols-2 gap-4 mt-2"><div><p><strong>MAWB/OBL:</strong> ${pod.mawb || 'N/A'}</p><p><strong>HAWB/HBL:</strong> ${pod.hawb || 'N/A'}</p></div><div><p><strong>Pieces:</strong> ${pod.pieces || 'N/A'}</p><p><strong>Weight:</strong> ${pod.grossWeight || 'N/A'}</p></div></div></div>${podCompletionDetails}<div class="flex justify-between items-end pt-4 mt-4 border-t"><p class="text-xs text-gray-400">Prepared By: ${pod.preparedBy || 'N/A'}</p><div id="qrcode" class="w-20 h-20"></div></div></div>`;
        }

        function getWorkerPodCaptureHtml(pod) {
            return `<div class="flex justify-between items-center"><h2 class="text-2xl font-bold">Complete Delivery</h2><button onclick="closeModal('worker-pod-modal')" class="text-gray-400 hover:text-gray-600 text-3xl">&times;</button></div><div class="mt-4 max-h-[60vh] overflow-y-auto pr-2">${getProfessionalPodHtml(pod)}<div class="mt-4 pod-view-section bg-blue-50"><h3 class="text-blue-700">Proof of Delivery - Capture</h3><div class="space-y-4 mt-2"><div><label for="receiver-name" class="block text-sm font-medium text-gray-700">Receiver Full Name</label><input type="text" id="receiver-name" class="w-full mt-1 p-2 border rounded-md" required></div><div><label class="block text-sm font-medium text-gray-700">Receiver Signature</label><canvas id="signature-pad"></canvas><button id="clear-signature" type="button" class="text-xs text-indigo-600 mt-1">Clear Signature</button></div><div><label for="pod-photo" class="block text-sm font-medium text-gray-700">Photo Evidence (Optional)</label><input type="file" id="pod-photo" accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"></div></div></div></div><div class="mt-6"><button id="submit-pod-btn" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg">Submit & Generate Final POD</button></div>`;
        }

        function getAdminDashboardShell() {
            return `<div class="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4"><div><h1 class="text-3xl font-bold" style="color: var(--theme-color);">QGO Logistics Platform</h1><p class="text-sm text-gray-500">Logged in as: <span id="user-display-name" class="font-bold"></span> (<span id="user-role-display" class="capitalize"></span>)</p></div></div><div class="border-b border-gray-200 mb-4"><nav class="-mb-px flex space-x-8" aria-label="Tabs"><button id="dashboard-tab-btn" class="dashboard-tab dashboard-tab-active">Dashboard</button><button id="warehouse-tab-btn" class="dashboard-tab">Warehouse</button></nav></div><div id="dashboard-content"><div class="flex items-center justify-between mb-4"><div id="view-toggle-container" class="flex items-center space-x-2 bg-gray-200 p-1 rounded-lg"><button id="admin-view-btn" class="px-4 py-1 text-sm font-semibold rounded-md">Admin View</button><button id="worker-view-btn" class="px-4 py-1 text-sm font-semibold rounded-md">Worker View</button></div></div><div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6"><div class="stat-card"><p class="text-sm text-gray-500">Ready for Delivery</p><p id="ready-count" class="text-3xl font-bold text-blue-600">0</p></div><div class="stat-card"><p class="text-sm text-gray-500">In Transit</p><p id="transit-count" class="text-3xl font-bold text-amber-600">0</p></div><div class="stat-card"><p class="text-sm text-gray-500">Completed Today</p><p id="completed-count" class="text-3xl font-bold text-green-600">0</p></div></div><div><input type="text" id="job-search-input" placeholder="Search by Job No, Shipper, Consignee..." class="w-full p-2 border rounded-md mb-4"></div><div id="job-list-container"></div></div><div id="warehouse-content" class="hidden"><div class="flex justify-between items-center mb-4"><h2 class="text-2xl font-bold">Warehouse Inventory</h2><button id="add-item-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg">Add New Item</button></div><div id="inventory-list"></div></div>`;
        }
        
        function getWorkerDashboardShell() {
             return `<div class="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4"><div><h1 class="text-3xl font-bold" style="color: var(--theme-color);">Your Delivery Tasks</h1><p class="text-sm text-gray-500">Logged in as: <span id="user-display-name" class="font-bold"></span> (<span id="user-role-display" class="capitalize"></span>)</p></div></div><div id="job-list-container"></div>`;
        }
        
        window.printPod = () => {
            const modalContent = document.querySelector('#view-pod-modal-content #professional-pod-view');
            if(modalContent) {
                const podView = document.getElementById('print-area');
                podView.innerHTML = modalContent.innerHTML;
                JsBarcode("#print-area #barcode", modalContent.querySelector('p:last-child').textContent.split(': ')[1], { format: "CODE128" });
                window.print();
            }
        };

        const showLoader = () => document.getElementById('loader-overlay').classList.add('visible');
        const hideLoader = () => document.getElementById('loader-overlay').classList.remove('visible');
        const openModal = (id) => document.getElementById(id).classList.add('visible');
        window.closeModal = (id) => document.getElementById(id).classList.remove('visible');
        function showNotification(message, isError = false) {
            const notification = document.getElementById('notification');
            notification.innerHTML = message;
            notification.style.backgroundColor = isError ? '#c53030' : '#2d3748';
            notification.classList.add('show');
            setTimeout(() => { notification.classList.remove('show'); }, 5000);
        }
        
        async function checkPublicView() {
            const params = new URLSearchParams(window.location.search);
            const podToView = params.get('viewpod');
            if (podToView) {
                document.querySelector('.no-print').style.display = 'none';
                document.getElementById('app-container').style.display = 'none';
                const publicView = document.getElementById('public-pod-view');
                publicView.innerHTML = '<div class="flex justify-center p-8"><div class="loader"></div></div>';
                publicView.style.display = 'block';
                const pod = await findPodByJobFileNo(podToView);
                if(pod) {
                    publicView.innerHTML = getProfessionalPodHtml(pod);
                    JsBarcode("#public-pod-view #barcode", pod.jobFileNo, { format: "CODE128", lineColor: "#000", width: 2, height: 40, displayValue: false });
                    new QRCode(document.querySelector("#public-pod-view #qrcode"), { text: window.location.href, width: 80, height: 80 });
                } else {
                    publicView.innerHTML = '<p class="text-center font-bold text-red-600">Proof of Delivery not found.</p>';
                }
            } else {
                simulateUser('admin');
            }
        }
        
        document.getElementById('simulate-admin-btn').addEventListener('click', () => simulateUser('admin'));
        document.getElementById('simulate-worker-btn').addEventListener('click', () => simulateUser('worker'));
        
        checkPublicView();

    </script>
</body>
</html>

